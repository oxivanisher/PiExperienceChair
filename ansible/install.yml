---
- name: Configure localhost
  hosts: localhost
  become: true
  vars:
    target_user: "pi"
    target_directory: "/home/{{ target_user }}/PiExperienceChair"
    services:
      - piexpchair_i2c.service
      - piexpchair_videoplayer.service
      - piexpchair_webui.service
      - piexpchair_watchdog.service
    force_hdmi: false

  tasks:
    - name: Ensure i2c is enabled on Raspberry Pi
      ansible.builtin.lineinfile:
        path: "/boot/firmware/config.txt"
        line: "dtparam=i2c_arm=on"
        state: present
      when: ansible_distribution == "Raspbian"
      notify: Reboot_pi
      become: true
      become_user: root

    - name: Ensure mosquitto and i2c-tools are installed
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - mosquitto
        - i2c-tools
        - python3-virtualenv
      become: true
      become_user: root

    - name: Ensure target user is in the i2c group
      ansible.builtin.user:
        name: "{{ target_user }}"
        groups: i2c
        append: true
      become: true
      become_user: root

    - name: Create python venv and install requirements
      ansible.builtin.pip:
        requirements: "{{ target_directory }}/requirements.txt"
        virtualenv: "{{ target_directory }}/venv"

    - name: Deploy watchdog script
      ansible.builtin.template:
        src: "piexpchair_watchdog.sh.jinja2"
        dest: "/usr/local/bin/piexpchair_watchdog.sh"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0750"
      become: true
      become_user: root

    - name: Install vmtouch to precache video files
      ansible.builtin.package:
        name: vmtouch
        state: present

    - name: Deploy vlc script
      ansible.builtin.template:
        src: "vlc_kiosk.sh.jinja2"
        dest: "/usr/local/bin/vlc_kiosk.sh"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0750"
      become: true
      become_user: root
      notify: Restart_lightdm

    - name: Ensure default media folder for piexpchair exists
      ansible.builtin.file:
        path: "/home/{{ target_user }}/media/"
        state: directory
        mode: '0750'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"

    - name: Ensure autostart folder exists
      ansible.builtin.file:
        path: "/home/{{ target_user }}/.config/autostart/"
        state: directory
        mode: '0750'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
      notify: Restart_lightdm

    - name: Deploy autostart file for user
      ansible.builtin.copy:
        src: "vlc_kiosk.desktop"
        dest: "/home/{{ target_user }}/.config/autostart/vlc_kiosk.desktop"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0640"
      notify: Restart_lightdm

    - name: Deploy systemd service files
      ansible.builtin.template:
        src: "{{ item }}.jinja2"
        dest: "/etc/systemd/system/{{ item }}"
        owner: root
        group: root
        mode: "0644"
      loop: "{{ services }}"

    - name: Enable and start systemd services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: true
        daemon_reload: true
      loop: "{{ services }}"

    - name: Deploy example broker config
      ansible.builtin.copy:
        src: "broker.yaml"
        dest: "{{ target_directory }}/config/broker.yaml"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0640"
      notify: Trigger_watchtog

    - name: Debug var
      ansible.builtin.debug:
        msg: "force_hdmi is {{ force_hdmi }}"

    - name: Force HDMI output
      ansible.builtin.import_tasks: force_hdmi.yml
      when:
        - force_hdmi
        - ansible_distribution == "Raspbian"

    - name: Force onboard output
      ansible.builtin.import_tasks: force_onboard_audio.yml
      when:
        - not force_hdmi
        - ansible_distribution == "Raspbian"

  handlers:
    - name: Reboot_pi
      ansible.builtin.reboot:
      become: true
      become_user: root

    - name: Restart_lightdm
      ansible.builtin.systemd_service:
        name: lightdm
        state: restarted

    - name: Trigger_watchtog
      ansible.builtin.copy:
        content: 'Force restart requested from ansible'
        dest: "{{ target_directory }}/tmp/force_restart"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0644"
